<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tod&#39;s Tech Tomes</title>
  
  <subtitle>Thoughts on Programming (mostly)</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://rolias.github.io/"/>
  <updated>2020-01-03T23:57:19.550Z</updated>
  <id>http://rolias.github.io/</id>
  
  <author>
    <name>Tod Gentille</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Apple Watch and Tennis Score Keeping</title>
    <link href="http://rolias.github.io/2020/01/03/tennis-score/"/>
    <id>http://rolias.github.io/2020/01/03/tennis-score/</id>
    <published>2020-01-03T23:57:19.000Z</published>
    <updated>2020-01-03T23:57:19.550Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/images/tennis-score.jpg">Tennis Scoring</a><br>I found it surprisingly hard to find an Apple Watch app for keeping score in a tennis game. Most of the apps out there want to analyze your swing, or track your workout or find some other way to justify charging you a subscription fee. I just want to remember the score. </p><h2 id="All-Sports-Score-Keeper"><a href="#All-Sports-Score-Keeper" class="headerlink" title="All Sports Score Keeper"></a>All Sports Score Keeper</h2><p>I eventually found a nice solution that keeps track of both the game score and the set score. It didn’t turn up in most of my searches because I kept using the word <code>Tennis</code> and this app is designed for multiple sports. This turned out to be a nice benefit because I also do a hitting drill with a friend and we play one point at a time until 21. The <strong>All Sports Score Keeper</strong> app can do this with either the <code>Simple Scoring</code> option or the <code>Table Tennis</code> option. Table tennis can use 11 or 21 point scoring so be sure to use the options to configure it. This is also a convenient way to keep track of your bean bag toss game, especially as the afternoon wears on and beer supply starts dwindling.</p><p>For the price of a can of tennis balls, you’ll never forget the score again. Try it for free to make sure it works for you and if so, you’ll likely want the undo and reset features that are available in the paid version. </p><h2 id="Swiping"><a href="#Swiping" class="headerlink" title="Swiping"></a>Swiping</h2><p>You change the score with a simple swipe. At first I thought this was not going to be to my liking but it eliminates the potential for accidentally touching and scoring a point. Plus the concept of swiping towards your opponent when they score and towards yourself when you score is hard to get wrong. </p><h2 id="Free-Version-bug"><a href="#Free-Version-bug" class="headerlink" title="Free Version bug"></a>Free Version bug</h2><p>At the time of this writing, the app is on version 1.4 and there is a small bug that is easy to work around once you understand it. The hamburger menu ☰ shows the various sports you can select. It is off by one. So if you select <code>Tennis</code> you’re going to get <code>Table Tennis</code>. Select the item above the sport you want to get that sport’s scoring.</p><h2 id="Pro-Version-Sync-Issue"><a href="#Pro-Version-Sync-Issue" class="headerlink" title="Pro Version Sync Issue"></a>Pro Version Sync Issue</h2><p>When I paid for the pro version I had a problem getting my watch to recognize the new version. I wrote the developer and he responded almost immediately. The steps I took to correct this were:</p><ol><li>Open the app on the phone</li><li>Open the app on the watch</li><li>Try to undo on the watch (a pro version version feature) and when the app asks you to get the pro version (which you already have) leave that message on the watch. </li><li>Force close the app on your phone (i.e. double-click the home button and swipe up on the app)</li><li>Reopen the app on the phone.</li><li>NOW press OK on the watch to dismiss the dialog</li><li>Try the undo feature again. If it works, you’re all set. </li></ol><p>Once I did this I had no problem with the app.</p><h2 id="Workouts-and-Apps"><a href="#Workouts-and-Apps" class="headerlink" title="Workouts and Apps"></a>Workouts and Apps</h2><p>There is an Apple Watch problem that’s a little problematic. If you start a workout session for your tennis game there is no way to keep the scoring app as the top app. Apple continually gives the workout app that privilege. This is somewhat inconvenient. You can double press the crown to get to the scoring app. I just gave up on tracking my workout. You still get all the credits for steps and exercise you just won’t have things like the heart rate tracking and other nice details. I can’t fault the app or the developer. I have seen similar complaints about other apps and the fact that the workout app gets priority.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;/images/tennis-score.jpg&quot;&gt;Tennis Scoring&lt;/a&gt;&lt;br&gt;I found it surprisingly hard to find an Apple Watch app for keeping score in a t
      
    
    </summary>
    
    
      <category term="apple watch" scheme="http://rolias.github.io/tags/apple-watch/"/>
    
  </entry>
  
  <entry>
    <title>Apple Watch and Audible Book Syncing</title>
    <link href="http://rolias.github.io/2020/01/02/Apple-Watch-and-Audible/"/>
    <id>http://rolias.github.io/2020/01/02/Apple-Watch-and-Audible/</id>
    <published>2020-01-02T22:39:39.000Z</published>
    <updated>2020-01-03T00:45:06.410Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/apple-watch.png" alt="Apple watch"> I wear a watch every day, but it wasn’t until the Apple Watch Series 5 that I felt I could give up my non-smart watch. The always-on feature was key. Once I had an Apple watch I started finding more and more things to like about it. One was the ability to listen to Audible books from my watch on my daily walk and leave my phone at home. I don’t have the cellular feature and I like that now I am not disturbed by text or phone calls when I walk. Plus it’s just nice to not carry my oversized phone with me on the walk. </p><h2 id="Syncing-Audible-Books"><a href="#Syncing-Audible-Books" class="headerlink" title="Syncing Audible Books"></a>Syncing Audible Books</h2><p>The biggest problem with syncing is that it’s slow and seems like it’s not working. When I let it run overnight it worked. Starting the sync requires theses steps:</p><ol><li>Go to the <code>My Library</code> section of the app.</li><li>Select the <code>Device</code> tab</li><li>Click on the meatballs …  next to the book you want to sync</li><li>Select the <code>Sync to Apple Watch</code> option in the menu that shows up (this step not shown in image)<br><img src="/images/audible.jpg" alt="Audible Screen Shot">  </li></ol><p>When the process completes, a watch icon will show up for the sync’d book. You can see an example next to “The Hollow Hills” in the image. Again, when I first did this and watched the progress it would get past the preparing content step with no problem. However, it would make 0% progress on syncing and stay there. When I just did it at night and put my watch on the charger and placed my phone next to it, the sync was finished when I got up.</p><p>In the screen shot you’ll notice the book “The Last Enchantment” doesn’t have a kebab menu. That’s because I experimented with downloading that book in parts. If I click on that book I can see both parts and then I can sync the parts one at a time.</p><h2 id="The-Final-Problem"><a href="#The-Final-Problem" class="headerlink" title="The Final Problem"></a>The Final Problem</h2><p>One last issue arose after the book had sync’d. The Audible app on the watch seemed stuck on the screen that had instructions for how to sync a book. This was fixed by force quitting the Audible app on my watch. Force quitting an app isn’t such an obvious thing for a new watch owner so here are the steps for that.</p><ol><li>Have the Audible app active on your watch</li><li>Press and hold the side button for a few seconds to bring up the reboot screen.</li><li>Press in on the CROWN for a second or two and you’ll see the app quit.</li></ol><p>Now launch the Audible app again and go for a walk with just your watch and wireless headphones.</p><h3 id="REFERENCE"><a href="#REFERENCE" class="headerlink" title="REFERENCE"></a>REFERENCE</h3><p>A <a href="https://www.scottallen.com/2019/10/fix-my-apple-watch-isnt-syncing-with-audible-books/" target="_blank" rel="noopener">post from Scott Allen</a> helped me realize I both wasn’t alone, wasn’t crazy, and needed to be more patient. Scott’s post has many more details and workarounds for various issues that might arise.  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/apple-watch.png&quot; alt=&quot;Apple watch&quot;&gt; I wear a watch every day, but it wasn’t until the Apple Watch Series 5 that I felt 
      
    
    </summary>
    
    
      <category term="apple watch" scheme="http://rolias.github.io/tags/apple-watch/"/>
    
  </entry>
  
  <entry>
    <title>Storing the Hexo Site in GitHub</title>
    <link href="http://rolias.github.io/2019/05/04/hexo-blog-pt-2/"/>
    <id>http://rolias.github.io/2019/05/04/hexo-blog-pt-2/</id>
    <published>2019-05-04T20:59:19.000Z</published>
    <updated>2019-05-19T22:15:08.568Z</updated>
    
    <content type="html"><![CDATA[<p>Now that you learned in Part 1 -&gt; <a href="https://rolias.github.io/2019/05/03/using-hexo/">Blogging with Hexo and GitHubPages</a> how to get your site up on <code>[username].github.io</code>, you need a repository that stores your original markdown and any changes you make to the files that generate your blog.  </p><h2 id="1-Create-a-New-Repository"><a href="#1-Create-a-New-Repository" class="headerlink" title="1. Create a New Repository"></a>1. Create a New Repository</h2><p>Create a new repository in GitHub. Don’t add a <code>ReadMe</code> to it; just create the empty repository.  GitHub will show you a section titled</p><h3 id="…or-push-an-existing-repository-from-the-command-line"><a href="#…or-push-an-existing-repository-from-the-command-line" class="headerlink" title="…or push an existing repository from the command line"></a>…or push an existing repository from the command line</h3><p>  Underneath that are two commands that you can copy to the clipboard with the clipboard icon to the right.  We’ll use these commands after the next step.</p><h2 id="2-git-init-finally"><a href="#2-git-init-finally" class="headerlink" title="2. git init (finally)"></a>2. git init (finally)</h2><p>Open a terminal window at the root level of your hexo site. NOW you can do a <code>git init</code>,  then add all your files, and do a normal commit. You’ll notice that the previous process of setting up Hexo did create a <code>.gitignore</code> file for you that will ignore all the generated files.  </p><h2 id="3-Link-and-Sync"><a href="#3-Link-and-Sync" class="headerlink" title="3. Link and Sync"></a>3. Link and Sync</h2><p>Take the copied commands from GitHub and paste those into the terminal. This will both link your local repo to GitHub and push up the changes.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Now that you learned in Part 1 -&amp;gt; &lt;a href=&quot;https://rolias.github.io/2019/05/03/using-hexo/&quot;&gt;Blogging with Hexo and GitHubPages&lt;/a&gt; how
      
    
    </summary>
    
    
      <category term="hexo" scheme="http://rolias.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Blogging with Hexo and GitHub Pages</title>
    <link href="http://rolias.github.io/2019/05/03/using-hexo/"/>
    <id>http://rolias.github.io/2019/05/03/using-hexo/</id>
    <published>2019-05-03T18:03:21.000Z</published>
    <updated>2019-05-19T22:08:36.796Z</updated>
    
    <content type="html"><![CDATA[<p>I just started using <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> for this blog, and I had a little trouble getting started. Mostly my normal node.js coding process got in the way. I created a folder for the project, did a <code>git init</code> and started on the process. That was a mistake. It turns out an important “step” is not to do anything with git. You do need to create a new repo in GitHub pages and name it [username].github.io where you replace [username] with your GitHub username (i.e., for me rolias.github.io). Your repo needs this exact naming convention. Don’t create a readme, don’t do anything else with GitHub or git, let Hexo handle everything else.</p><h2 id="Step-by-Step"><a href="#Step-by-Step" class="headerlink" title="Step by Step"></a>Step by Step</h2><h3 id="1-Install-Hexo-globally"><a href="#1-Install-Hexo-globally" class="headerlink" title="1. Install Hexo globally"></a>1. Install Hexo globally</h3><p>I know you hate to install things globally. Do it anyway.<br><code>npm install -g hexo-cli</code><br>You can verify it installed by checking the version<br><code>hexo -v</code><br>If you don’t get a response with version information, it didn’t install correctly.</p><h3 id="2-Create-the-project"><a href="#2-Create-the-project" class="headerlink" title="2. Create the project"></a>2. Create the project</h3><p>Go to a folder where you want to store the entire project and enter<br><code>hexo init [username].github.io</code><br>Remember here and in all the following steps to replace <code>[username]</code> with your actual username as talked about in the introductory paragraph (I won’t tell you again, I promise).</p><h3 id="3-Fire-it-up"><a href="#3-Fire-it-up" class="headerlink" title="3. Fire it up"></a>3. Fire it up</h3><p>Move into the newly created folder and then do an npm install.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> [username].github.io</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h3 id="4-Configure-the-project-title-author-and-timezone"><a href="#4-Configure-the-project-title-author-and-timezone" class="headerlink" title="4. Configure the project title, author and timezone"></a>4. Configure the project title, author and timezone</h3><p>Use your favorite code editor and edit the <code>_config.yml</code> file. I prefer VS Code so at this point in the terminal I type <code>code .</code> and that loads the project. Near the top, you’ll see the <code>#Site</code> section. Put in the title for your blog, the subtitle (if you use one), and put your name in the <code>author:</code> entry.  </p><div class="bug"> <strong>Warning</strong> - If you don’t leave a space after the : for each entry the generator will complain.  </div><p>In the timezone, you need to put a <a href="https://momentjs.com/timezone/" target="_blank" rel="noopener">moment compatible timezone</a>. Using their site click on the map to get the string needed for your timezone. For example, here on the west coast of the U.S., I use <code>America/Los Angeles.</code></p><p>A little lower you’ll see the <code># URL</code> section. Enter your information for the <code>url:</code> entry. <code>http://[username].github.io/</code>.</p><div class="tip"><strong>VSCode Tip</strong> - I love the built-in terminal window <code>View→Terminal (⌃`).</code> I like it so much I use two of them by using either the split terminal icon or the <code>⌘\</code> shortcut. Having two windows helps because we’re going to dedicate one terminal to run the server, but we want to issue Hexo terminal commands in the other pane.</div><h3 id="5-Start-the-test-server"><a href="#5-Start-the-test-server" class="headerlink" title="5. Start the test server"></a>5. Start the test server</h3><p>In the terminal type <code>hexo server</code> - This isn’t completely necessary, but the odds are good you want to check out on your local server how your post looks before you deploy it up into GitHub. <em>I like to use the right terminal pane in VSCode for this.</em></p><div class="remember"> <strong>Remember</strong> - any time you modify the <code>_config.yml</code> file, stop the server with <code>⌃c</code> and restart it to pick up the changes.</div><h3 id="6-Test-the-site"><a href="#6-Test-the-site" class="headerlink" title="6. Test the site"></a>6. Test the site</h3><p>Open a browser and type in the address bar <code>localhost:4000</code>. Your new site will load and show you the default home page. After the next step, you can feel free to delete the sample default post.</p><h3 id="7-Create-a-New-Post"><a href="#7-Create-a-New-Post" class="headerlink" title="7. Create a New Post"></a>7. Create a New Post</h3><p>In the terminal type</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">'Your blog post title'</span></span><br></pre></td></tr></table></figure><p>You’ll get some feedback about the file created in <code>source→_posts</code>. The file will contain the header with the title and date. You can now open that file in your editor and write your post.</p><div class="tip"><strong>Tip</strong> - You’ll probably want to add some tags here. This is also another place to make sure you leave space after the <code>:</code> for each entry.</div><p>Go back to your browser and hit refresh. My experience is that Hexo will automatically generate the new content on demand. There is also a <code>hexo generate —watch</code> command you can read about in the <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">hexo docs</a>. When your post is ready for the world, go to the next step.</p><h3 id="8-Clean-and-Deploy"><a href="#8-Clean-and-Deploy" class="headerlink" title="8. Clean and Deploy"></a>8. Clean and Deploy</h3><p>You don’t have anything to clean yet, but it’s a good habit to do both every time. Type two commands</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>Go back to your browser and enter <code>https://[username].github.io</code> . Your blog site is live and running in GitHub pages. Well almost. It can take a couple of minutes before GitHub catches up and pushes your changes live. Another reason to use a test server. </p><div class="tip" style="margin-right:50px"><strong>Script Tip</strong> - You can edit your <code>package.json</code> and add a script that will do both the clean and deploy steps. Add this section<br><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "deploy": "hexo clean; hexo deploy"</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><br><br></div><p>Now from the terminal you can type <code>npm run deploy</code> to deploy your changes to GitHub.</p><h3 id="9-Storing-the-Hexo-Site-in-GitHub"><a href="#9-Storing-the-Hexo-Site-in-GitHub" class="headerlink" title="9. Storing the Hexo Site in GitHub"></a>9. Storing the Hexo Site in GitHub</h3><p>That’s a blog for another day, and that <a href="https://rolias.github.io/2019/05/04/hexo-blog-pt-2/">day has arrived</a>.</p><h4 id="References-and-Shout-Outs"><a href="#References-and-Shout-Outs" class="headerlink" title="References and Shout Outs"></a>References and Shout Outs</h4><p><a href="https://gist.github.com/btfak/18938572f5df000ebe06fbd1872e4e39" target="_blank" rel="noopener">This gist</a> from btfak - which has a more laconic version of many of these steps.<br><a href="https://www.poweredbyjeff.com/2018/05/14/Deploying-Hexo-website-to-Github-Pages/" target="_blank" rel="noopener">Jeff Ferrari post</a> on taking advantage of the GitHub <code>docs</code> folder to publish posts instead of using your username.github.io page.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I just started using &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt; for this blog, and I had a little trouble getting
      
    
    </summary>
    
    
      <category term="hexo" scheme="http://rolias.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Don&#39;t use `export default` in TypeScript</title>
    <link href="http://rolias.github.io/2019/05/02/first-post/"/>
    <id>http://rolias.github.io/2019/05/02/first-post/</id>
    <published>2019-05-03T01:44:20.000Z</published>
    <updated>2019-05-03T16:29:46.659Z</updated>
    
    <content type="html"><![CDATA[<p>I was working on an <a href="https://www.npmjs.com/package/trello-helper" target="_blank" rel="noopener">npm package</a> written in TypeScript. I anticipated that the package would be used by programmers using JavaScript and TypeScript. Using <code>export default</code> works fine in TypeScript. Consuming a default class looks like this:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Trello <span class="keyword">from</span> <span class="string">'trello-helper'</span></span><br><span class="line"><span class="keyword">const</span> trello = <span class="keyword">new</span> Trello()</span><br></pre></td></tr></table></figure><p>The JavaScript users are not so lucky, they need to add a reference to the export named “default.”</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Trello = <span class="built_in">require</span>(<span class="string">"trello-helper"</span>);</span><br><span class="line"><span class="keyword">const</span> trello = <span class="keyword">new</span> Trello.default();</span><br></pre></td></tr></table></figure><p>This requirement strikes me as very non-intuitive for JavaScript users. Since the savings from using the default export is a pair of curly braces, and we’re all good at typing curly braces, I decided to no longer use <code>export default</code> in my code. That way the JavaScript import becomes the much more familiar:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; Trello &#125; = <span class="built_in">require</span>(<span class="string">"trello-helper"</span>);</span><br><span class="line"><span class="keyword">const</span> trello = <span class="keyword">new</span> Trello();</span><br></pre></td></tr></table></figure><p>In his <a href="https://stackoverflow.com/questions/55940063/why-does-using-typescript-class-in-javascript-require-default" target="_blank" rel="noopener">stack<strong>overflow</strong> answer</a> to my question around the need for <code>.default</code>, Simon Chan pointed out a nice workaround. As nice as that workaround is, I think I’ll stick with not using <code>export default</code>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I was working on an &lt;a href=&quot;https://www.npmjs.com/package/trello-helper&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;npm package&lt;/a&gt; written in TypeS
      
    
    </summary>
    
    
      <category term="programming" scheme="http://rolias.github.io/tags/programming/"/>
    
      <category term="typescript" scheme="http://rolias.github.io/tags/typescript/"/>
    
  </entry>
  
</feed>
