<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tod&#39;s Tech Tomes</title>
  
  <subtitle>Thoughts on Programming (mostly)</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://rolias.github.io/"/>
  <updated>2019-05-04T01:19:54.011Z</updated>
  <id>http://rolias.github.io/</id>
  
  <author>
    <name>Tod Gentille</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Blogging with Hexo and GitHub Pages</title>
    <link href="http://rolias.github.io/2019/05/03/using-hexo/"/>
    <id>http://rolias.github.io/2019/05/03/using-hexo/</id>
    <published>2019-05-03T18:03:21.000Z</published>
    <updated>2019-05-04T01:19:54.011Z</updated>
    
    <content type="html"><![CDATA[<p>I just started using <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> for this blog, and I had a little trouble getting started. Mostly my normal node.js coding process got in the way. I created a folder for the project, did a <code>git init</code> and started on the process. That was a mistake. It turns out an important “step” is not to do anything with git. You do need to create a new repo in GitHub pages and name it [username].github.io where you replace [username] with your GitHub username (i.e., for me rolias.github.io). Your repo needs this exact naming convention. Don’t create a readme, don’t do anything else with GitHub or git, let Hexo handle everything else.</p><h2 id="Step-by-Step"><a href="#Step-by-Step" class="headerlink" title="Step by Step"></a>Step by Step</h2><h3 id="1-Install-Hexo-globally"><a href="#1-Install-Hexo-globally" class="headerlink" title="1. Install Hexo globally"></a>1. Install Hexo globally</h3><p>I know you hate to install things globally. Do it anyway.<br><code>npm install -g hexo-cli</code><br>You can verify it installed by checking the version<br><code>hexo -v</code><br>If you don’t get a response with version information, it didn’t install correctly.</p><h3 id="2-Create-the-project"><a href="#2-Create-the-project" class="headerlink" title="2. Create the project"></a>2. Create the project</h3><p>Go to a folder where you want to store the entire project and enter<br><code>hexo init [username].github.io</code><br>Remember here and in all the following steps to replace <code>[username]</code> with your actual username as talked about in the introductory paragraph (I won’t tell you again, I promise).</p><h3 id="3-Fire-it-up"><a href="#3-Fire-it-up" class="headerlink" title="3. Fire it up"></a>3. Fire it up</h3><p>Move into the newly created folder and then do an npm install.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> [username].github.io</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h3 id="4-Configure-the-project-title-author-and-timezone"><a href="#4-Configure-the-project-title-author-and-timezone" class="headerlink" title="4. Configure the project title, author and timezone"></a>4. Configure the project title, author and timezone</h3><p>Use your favorite code editor and edit the <code>_config.yml</code> file. I prefer VS Code so at this point in the terminal I type <code>code .</code> and that loads the project. Near the top, you’ll see the <code>#Site</code> section. Put in the title for your blog, the subtitle (if you use one), and put your name in the <code>author:</code> entry.  </p><ul><li><strong>Tip</strong> - Make sure you leave a space after the : for each entry.  </li></ul><p>In the timezone, you need to put a <a href="https://momentjs.com/timezone/" target="_blank" rel="noopener">moment compatible timezone</a>. Using their site click on the map to get the string needed for your timezone. For example, here on the west coast of the U.S., I use <code>America/Los Angeles.</code></p><p>A little lower you’ll see the <code># URL</code> section. Enter your information for the <code>url:</code> entry. <code>http://[username].github.io/</code>.</p><ul><li><strong>VSCode Tip</strong> - I love the built-in terminal window <code>View→Terminal (⌃`).</code> I like it so much I use two of them by using either the split terminal icon or the <code>⌘\</code> shortcut. Having two windows helps because we’re going to dedicate one terminal to run the server, but we want to issue Hexo terminal commands in the other pane.</li></ul><h3 id="5-Start-the-test-server"><a href="#5-Start-the-test-server" class="headerlink" title="5. Start the test server"></a>5. Start the test server</h3><p>In the terminal type <code>hexo server</code> - This isn’t completely necessary, but the odds are good you want to check out on your local server how your post looks before you deploy it up into GitHub. <em>I like to use the right terminal pane in VSCode for this.</em></p><ul><li><strong>Server Tip</strong> - any time you modify the <code>_config.yml</code> file, stop the server with <code>⌃c</code> and restart it to pick up the changes.</li></ul><h3 id="6-Test-the-site"><a href="#6-Test-the-site" class="headerlink" title="6. Test the site"></a>6. Test the site</h3><p>Open a browser and type in the address bar <code>localhost:4000</code>. Your new site will load and show you the default home page. After the next step, you can feel free to delete the sample default post.</p><h3 id="7-Create-a-New-Post"><a href="#7-Create-a-New-Post" class="headerlink" title="7. Create a New Post"></a>7. Create a New Post</h3><p>In the terminal type</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">'Your blog post title'</span></span><br></pre></td></tr></table></figure><p>You’ll get some feedback about the file created in <code>source→_posts</code>. The file will contain the header with the title and date. You can now open that file in your editor and write your post.</p><ul><li><strong>Tip</strong> You’ll probably want to add some tags here. This is also another place to make sure you leave space after the <code>:</code> for each entry.</li></ul><p>Go back to your browser and hit refresh. My experience is that Hexo will automatically generate the new content on demand. There is also a <code>hexo generate —watch</code> command you can read about in the <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">hexo docs</a>. When your post is ready for the world, go to the next step.</p><h3 id="8-Clean-and-Deploy"><a href="#8-Clean-and-Deploy" class="headerlink" title="8. Clean and Deploy"></a>8. Clean and Deploy</h3><p>You don’t have anything to clean yet, but it’s a good habit to do both every time. Type two commands</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>Go back to your browser and enter <code>https://[username].github.io</code> . Your blog site is live and running in GitHub pages.<br><strong>Script Tip</strong> - You can edit your <code>package.json</code> and add a script that will do both the clean and deploy steps. Add this section</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "deploy": "hexo clean; hexo deploy"</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>Now from the terminal you can type <code>npm run deploy</code> to deploy your changes to GitHub.</p><h4 id="References-and-Shout-Outs"><a href="#References-and-Shout-Outs" class="headerlink" title="References and Shout Outs"></a>References and Shout Outs</h4><p><a href="https://gist.github.com/btfak/18938572f5df000ebe06fbd1872e4e39" target="_blank" rel="noopener">This gist</a> from btfak - which has a more laconic version of many of these steps.<br><a href="https://www.poweredbyjeff.com/2018/05/14/Deploying-Hexo-website-to-Github-Pages/" target="_blank" rel="noopener">Jeff Ferrari post</a> on taking advantage of the GitHub <code>docs</code> folder to publish posts instead of using your username.github.io page.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I just started using &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt; for this blog, and I had a little trouble getting
      
    
    </summary>
    
    
      <category term="hexo" scheme="http://rolias.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Don&#39;t use `export default` in TypeScript</title>
    <link href="http://rolias.github.io/2019/05/02/first-post/"/>
    <id>http://rolias.github.io/2019/05/02/first-post/</id>
    <published>2019-05-03T01:44:20.000Z</published>
    <updated>2019-05-03T16:29:46.659Z</updated>
    
    <content type="html"><![CDATA[<p>I was working on an <a href="https://www.npmjs.com/package/trello-helper" target="_blank" rel="noopener">npm package</a> written in TypeScript. I anticipated that the package would be used by programmers using JavaScript and TypeScript. Using <code>export default</code> works fine in TypeScript. Consuming a default class looks like this:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Trello <span class="keyword">from</span> <span class="string">'trello-helper'</span></span><br><span class="line"><span class="keyword">const</span> trello = <span class="keyword">new</span> Trello()</span><br></pre></td></tr></table></figure><p>The JavaScript users are not so lucky, they need to add a reference to the export named “default.”</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Trello = <span class="built_in">require</span>(<span class="string">"trello-helper"</span>);</span><br><span class="line"><span class="keyword">const</span> trello = <span class="keyword">new</span> Trello.default();</span><br></pre></td></tr></table></figure><p>This requirement strikes me as very non-intuitive for JavaScript users. Since the savings from using the default export is a pair of curly braces, and we’re all good at typing curly braces, I decided to no longer use <code>export default</code> in my code. That way the JavaScript import becomes the much more familiar:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; Trello &#125; = <span class="built_in">require</span>(<span class="string">"trello-helper"</span>);</span><br><span class="line"><span class="keyword">const</span> trello = <span class="keyword">new</span> Trello();</span><br></pre></td></tr></table></figure><p>In his <a href="https://stackoverflow.com/questions/55940063/why-does-using-typescript-class-in-javascript-require-default" target="_blank" rel="noopener">stack<strong>overflow</strong> answer</a> to my question around the need for <code>.default</code>, Simon Chan pointed out a nice workaround. As nice as that workaround is, I think I’ll stick with not using <code>export default</code>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I was working on an &lt;a href=&quot;https://www.npmjs.com/package/trello-helper&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;npm package&lt;/a&gt; written in TypeS
      
    
    </summary>
    
    
      <category term="programming" scheme="http://rolias.github.io/tags/programming/"/>
    
      <category term="typescript" scheme="http://rolias.github.io/tags/typescript/"/>
    
  </entry>
  
</feed>
